Requirements.
  qt4.8.1 or higher. tested on 4.8.1 and 4.8.3. Might work on earlier versions, need testing.
  qtsolutions: as of 10/29/2012, this can be found at http://qt.gitorious.org/qt-solutions. the
    repository can be found at "git@gitorious.org:qt-solutions/qt-solutions.git".
    This is a source only library. No building and installing.
  QSerialDevice: as of 10/29/2012, this can be found at http://qt.gitorious.org/qtplayground/qtserialport
    I believe Qt5 will include QSerialDevice by default. For Qt4 it must be built and installed.
    I needed libudev-dev to build QSerialDevice....... As of 08/01/2014, has been renamed to qserialport and
    the repository has moved to "git://gitorious.org/qt/qtserialport.git". Build with 
    "qmake-qt4 ../source/qtserialport.pro" then "make" then "sudo make install"
    
    
SpaceMeld building linux:
    cd SpaceMeld
    mkdir build
    cd build
    cmake -DQT_QMAKE_EXECUTABLE=qmake-qt4 -DCMAKE_CXX_FLAGS="-Wall -std=c++11" -DCMAKE_BUILD_TYPE=Debug ../source
    make
    
you can disable specific exports with:
-DBUILD_EXPORT_X11_MAG=OFF
-DBUILD_EXPORT_WIN_MAG=OFF
-DBUILD_EXPORT_DBUS=OFF

Exports control the communication between the daemon and the client. X11_MAG and WIN_MAG are for legacy magellan support only.
The magellan protocol has been deprecated and shouldn't be used for new development. New development should use dbus.
  
SpaceMeld operation (normal):
  After a successful build of both the daemon and the controller, launch the controller with
    "sudo SpaceMeldController" (or whatever to run with root priviledges). ALL normal interactions with the
    driver should be through the controller application.
  For the service path, browse to and select the SpaceMeldDaemon that should have been previously built.
  In the device interfaces list box, select the serial entry and push the enable button to the right.
    USB and joystick are not implemented at this point. All interfaces are disabled by default.
  Push the install button to install the service/daemon.
  Push the start button and the let the daemon initialize. After a few seconds any recognized devices will
    be in the devices tab.
  Switch to the devices tab.
  Devices have to be enabled. In the upper pane, select the device and double click the cell in the enabled column to 
    change to true.
  Exports have to be enabled. In the lower left pane, select the appropriate export. double click the
    appropriate cell and enable. As of 08/01/2014 only x11 and win are implemented. x11 for linux and win for windows.
  Axis control can be modified in the lower middle pane. You can inverse the axis with checkboxes and control
    the sensitivity with the scale numbers(.1 to 10). The output axes can be "dragged and dropped" to change mapping
    from device axis to output axis. Changes in this pane should happen immediately when the device is enabled. see below.
  You can map buttons to accelerator keys. In the lower right pane, double click in the appropriate cell and press key combo.
    This currently doesn't work on windows.
  Devices don't enter a functioning state until the driver is started with the device enabled. This means that after
    first run of the controller and the device has been enabled, the driver needs to be restarted. Go back to 
    the service tab and push stop(lower right) and then push start. After a few seconds the device should be ready.
  Running the controller from the terminal is a great way to get extra information.
  
  
SpaceMeld operation (debug/testing)
  Sometimes operating the daemon through the controller can be cumbersome. You can
    run the driver as a normal executable (not a daemon/service) with -e switch to
    the daemon executable like, "./SpaceMeldDaemon -e". Then you can use "ctrl + c"
    in the terminal to kill the driver. This works good for testing. Obviously
    having the service running through the controller and then trying to run
    as a normal executable with the -e switch, will cause problems.
  
  
Settings file.
  Because the controller and deamon run as root, the configuration file is difficult to find.
  On kubuntu it is located at "/etc/xdg/Blobfish/SpaceMeld.conf"
  
Known limitations and bugs.
  Couldn't generate key strokes on windows for button mapping.
  Only Serial devices at ths point.
  
basic testing has been done on:
  Kubuntu 12.04 amd64 and 12.10 amd64.
  windows 7 amd64.
  
devices tested:
  spaceball 4000flx		Kubuntu amd64(12.04, 12.10)				Windows7 amd64
  magellan classic		Kubuntu amd64(12.04, 12.10)				Windows7 amd64
  magellan plus xt		Kubuntu amd64(12.04, 12.10, 13.04, 13.10, 14.04)	Windows7 amd64
    
  
DBus, In Development
I had to create a config file for adding to the system bus. On kubuntu 14.04 it was located at
"/etc/dbus-1/system.d/org.spacemeld.conf". guessing filename has to match service name registered.
contents of that file:

<!DOCTYPE busconfig PUBLIC
 "-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd">
<busconfig>
  <!-- Only user root can own spacemeld -->
  <policy user="root">
    <allow own="org.spacemeld"/>
  </policy>
 
  <!-- Allow anyone to call into the service - we'll reject callers using PolicyKit -->
  <policy context="default">
    <allow send_destination="org.spacemeld"
           send_interface="org.freedesktop.DBus.Introspectable"/>
    <allow send_destination="org.spacemeld"
           send_interface="org.freedesktop.DBus.Properties"/>
    <allow send_destination="org.spacemeld"
           send_interface="org.spacemeld.device"/>
    <allow receive_sender="org.spacemeld"/>
    <allow receive_interface="org.spacemeld"/>
  </policy>
</busconfig>

